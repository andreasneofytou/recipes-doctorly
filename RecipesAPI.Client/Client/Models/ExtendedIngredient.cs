// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RecipesAPI.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ExtendedIngredient : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedIngredient class.
        /// </summary>
        public ExtendedIngredient() { }

        /// <summary>
        /// Initializes a new instance of the ExtendedIngredient class.
        /// </summary>
        public ExtendedIngredient(int id, string aisle = default(string), int? consistency = default(int?), string name = default(string), double? amount = default(double?), int? unit = default(int?), IList<Measure> measures = default(IList<Measure>))
            : base(id)
        {
            Aisle = aisle;
            Consistency = consistency;
            Name = name;
            Amount = amount;
            Unit = unit;
            Measures = measures;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aisle")]
        public string Aisle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "consistency")]
        public int? Consistency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public int? Unit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "measures")]
        public IList<Measure> Measures { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
            if (this.Measures != null)
            {
                foreach (var element in this.Measures)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
