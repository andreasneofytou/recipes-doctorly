// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RecipesAPI.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Recipe : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the Recipe class.
        /// </summary>
        public Recipe() { }

        /// <summary>
        /// Initializes a new instance of the Recipe class.
        /// </summary>
        public Recipe(int id, string title = default(string), int? readyInMinutes = default(int?), int? servings = default(int?), string summary = default(string), string instructions = default(string), IList<AnalyzedInstruction> analyzedInstructions = default(IList<AnalyzedInstruction>), IList<Cuisine> cuisines = default(IList<Cuisine>), IList<DishType> dishTypes = default(IList<DishType>), IList<ExtendedIngredient> extendedIngredients = default(IList<ExtendedIngredient>), bool? isVegetarian = default(bool?), bool? isVegan = default(bool?), bool? isGlutenFree = default(bool?), bool? isDairyFree = default(bool?), bool? isCheap = default(bool?), string sourceName = default(string))
            : base(id)
        {
            Title = title;
            ReadyInMinutes = readyInMinutes;
            Servings = servings;
            Summary = summary;
            Instructions = instructions;
            AnalyzedInstructions = analyzedInstructions;
            Cuisines = cuisines;
            DishTypes = dishTypes;
            ExtendedIngredients = extendedIngredients;
            IsVegetarian = isVegetarian;
            IsVegan = isVegan;
            IsGlutenFree = isGlutenFree;
            IsDairyFree = isDairyFree;
            IsCheap = isCheap;
            SourceName = sourceName;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "readyInMinutes")]
        public int? ReadyInMinutes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "servings")]
        public int? Servings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instructions")]
        public string Instructions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "analyzedInstructions")]
        public IList<AnalyzedInstruction> AnalyzedInstructions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cuisines")]
        public IList<Cuisine> Cuisines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dishTypes")]
        public IList<DishType> DishTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extendedIngredients")]
        public IList<ExtendedIngredient> ExtendedIngredients { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVegetarian")]
        public bool? IsVegetarian { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVegan")]
        public bool? IsVegan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isGlutenFree")]
        public bool? IsGlutenFree { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDairyFree")]
        public bool? IsDairyFree { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isCheap")]
        public bool? IsCheap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
            if (this.Title != null)
            {
                if (this.Title.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Title", 1);
                }
            }
            if (this.Summary != null)
            {
                if (this.Summary.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Summary", 1);
                }
            }
            if (this.Instructions != null)
            {
                if (this.Instructions.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Instructions", 1);
                }
            }
            if (this.AnalyzedInstructions != null)
            {
                foreach (var element in this.AnalyzedInstructions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Cuisines != null)
            {
                foreach (var element1 in this.Cuisines)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.DishTypes != null)
            {
                foreach (var element2 in this.DishTypes)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.ExtendedIngredients != null)
            {
                foreach (var element3 in this.ExtendedIngredients)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
